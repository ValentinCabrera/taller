{"ast":null,"code":"\n// import React, { useEffect, useState } from 'react';\n// import { getOrdenes, getOrdenesDeleted, postDeleteOrden, postRecoverOrden } from \"../../Utils/Orden\";\n// import Listar from \"../Listar\";\n// import DetailOrden from \"./DetailOrden\";\n\n// export default function OrdenTablActivos(props) {\n//     const [items, setItems] = useState([]);\n//     const [forceRender, setForceRender] = useState();\n//     const [modal, setModal] = useState();\n//     const [currentItem, setCurrentItem] = useState();\n\n//     useEffect(() => {\n//         getOrdenes().then(response => setItems(response));\n//     }, [forceRender]);\n\n//     const [searchTerm, setSearchTerm] = useState('');\n//     const [filterColumn, setFilterColumn] = useState(null);\n\n//     const handleColumnButtonClick = (columnName) => {\n//         if (filterColumn) {\n//             if (columnName.toString() !== filterColumn.toString()) setFilterColumn(columnName);\n//             else setFilterColumn(null);\n//         } else setFilterColumn(columnName);\n//     }\n\n//     function handleDeleteItem(item) {\n//         let resultado = window.confirm(`¿Está seguro que desea eliminar la orden numero ${item.id}?`)\n\n//         if (resultado) (\n//             postDeleteOrden(item.id)\n//                 .then(response => {\n//                     setForceRender({})\n//                     setCurrentItem();\n//                     alert(`La orden numero ${item.id} se elimino con exito.`)\n//                 })\n//                 .catch(error => { console.log(error) })\n//         );\n//     }\n\n//     const filteredData = items.filter((item) => {\n//         if (filterColumn) {\n//             let valueToSearch;\n//             if (filterColumn.length === 1) valueToSearch = item[filterColumn[0]];\n//             if (filterColumn.length === 2) valueToSearch = item[filterColumn[0]][filterColumn[1]];\n//             return valueToSearch.toString().toLowerCase().includes(searchTerm.toLowerCase());\n//         } else {\n//             return true;\n//         }\n//     });\n\n//     function handleSetModal(item) {\n//         if (!modal) {\n//             setCurrentItem(item);\n//             setModal(true);\n//         } else {\n//             setModal(false);\n//             setCurrentItem();\n//         };\n//     };\n\n//     return (\n//         <div>\n//             {modal &&\n//                 <div class=\"modal-background\">\n//                     <div class=\"modal-content h100 scroll\">\n//                         <div className='row w100'>\n//                             <button className='modal-close-button' onClick={handleSetModal}>Volver</button>\n//                         </div>\n//                         <DetailOrden orden={currentItem} setForceRender={setForceRender} handleSetModal={handleSetModal} />\n//                     </div>\n//                 </div>\n//             }\n\n//             <div className='head-table'>\n//                 <div className='row row-line'>\n//                     <h1>Ordenes</h1>\n//                     {props.changeFrame}\n//                 </div>\n//                 <div className='row'>\n//                     <input\n//                         type=\"search\"\n//                         placeholder=\"Buscar...\"\n//                         value={searchTerm}\n//                         className='finder'\n//                         onChange={(e) => setSearchTerm(e.target.value)}\n//                     />\n//                     <button className='head-button' onClick={() => setModal(true)}>Crear</button>\n//                 </div>\n//             </div>\n//             <table className=\"cliente-table\">\n//                 <thead>\n//                     <tr>\n//                         <th>\n//                             <button className={filterColumn && filterColumn.toString() === 'vehiculo,patente' ? 'selected' : ''} onClick={() => handleColumnButtonClick([\"vehiculo\", \"patente\"])}>\n//                                 Vehiculo\n//                             </button>\n//                         </th>\n//                         <th>\n//                             <button className={filterColumn && filterColumn.toString() === 'cliente,nombre' ? 'selected' : ''} onClick={() => handleColumnButtonClick([\"cliente\", \"nombre\"])}>\n//                                 Nombre cliente\n//                             </button>\n//                         </th>\n//                         <th>\n//                             <button className={filterColumn && filterColumn.toString() === 'cliente,apellido' ? 'selected' : ''} onClick={() => handleColumnButtonClick([\"cliente\", \"apellido\"])}>\n//                                 Apellido cliente\n//                             </button>\n//                         </th>\n//                         <th>\n//                             <p>Servicios</p>\n//                         </th>\n//                         <th>\n//                             Acciones\n//                         </th>\n//                     </tr>\n//                 </thead>\n//                 <tbody>\n//                     {filteredData.map((item, index) => (\n//                         <tr key={index}>\n//                             <td>{item.vehiculo.patente}</td>\n//                             <td>{item.cliente.nombre}</td>\n//                             <td>{item.cliente.apellido}</td>\n//                             <td>\n//                                 <select className='cliente-table-select'>\n//                                     {item.servicios.map(servicio => (\n//                                         <option value={servicio.nombre}>{servicio.nombre}</option>\n//                                     ))}\n//                                 </select>\n//                             </td>\n//                             <td className='action-box'>\n//                                 <button className='action-button red' onClick={() => handleDeleteItem(item)}>-</button>\n//                                 <button className='action-button green' onClick={() => handleSetModal(item)}>+</button>\n//                             </td>\n//                         </tr>\n//                     ))}\n//                 </tbody>\n//             </table>\n//         </div >\n//     );\n\n// };","map":{"version":3,"names":[],"sources":["/Users/valentincabrera/Library/Mobile Documents/com~apple~CloudDocs/General/UTN/4to/ProgramacionAvanzada/taller/front/src/Components/Ordenes/OrdenTablaActivos.js"],"sourcesContent":["\n// import React, { useEffect, useState } from 'react';\n// import { getOrdenes, getOrdenesDeleted, postDeleteOrden, postRecoverOrden } from \"../../Utils/Orden\";\n// import Listar from \"../Listar\";\n// import DetailOrden from \"./DetailOrden\";\n\n\n// export default function OrdenTablActivos(props) {\n//     const [items, setItems] = useState([]);\n//     const [forceRender, setForceRender] = useState();\n//     const [modal, setModal] = useState();\n//     const [currentItem, setCurrentItem] = useState();\n\n//     useEffect(() => {\n//         getOrdenes().then(response => setItems(response));\n//     }, [forceRender]);\n\n//     const [searchTerm, setSearchTerm] = useState('');\n//     const [filterColumn, setFilterColumn] = useState(null);\n\n//     const handleColumnButtonClick = (columnName) => {\n//         if (filterColumn) {\n//             if (columnName.toString() !== filterColumn.toString()) setFilterColumn(columnName);\n//             else setFilterColumn(null);\n//         } else setFilterColumn(columnName);\n//     }\n\n//     function handleDeleteItem(item) {\n//         let resultado = window.confirm(`¿Está seguro que desea eliminar la orden numero ${item.id}?`)\n\n//         if (resultado) (\n//             postDeleteOrden(item.id)\n//                 .then(response => {\n//                     setForceRender({})\n//                     setCurrentItem();\n//                     alert(`La orden numero ${item.id} se elimino con exito.`)\n//                 })\n//                 .catch(error => { console.log(error) })\n//         );\n//     }\n\n//     const filteredData = items.filter((item) => {\n//         if (filterColumn) {\n//             let valueToSearch;\n//             if (filterColumn.length === 1) valueToSearch = item[filterColumn[0]];\n//             if (filterColumn.length === 2) valueToSearch = item[filterColumn[0]][filterColumn[1]];\n//             return valueToSearch.toString().toLowerCase().includes(searchTerm.toLowerCase());\n//         } else {\n//             return true;\n//         }\n//     });\n\n//     function handleSetModal(item) {\n//         if (!modal) {\n//             setCurrentItem(item);\n//             setModal(true);\n//         } else {\n//             setModal(false);\n//             setCurrentItem();\n//         };\n//     };\n\n//     return (\n//         <div>\n//             {modal &&\n//                 <div class=\"modal-background\">\n//                     <div class=\"modal-content h100 scroll\">\n//                         <div className='row w100'>\n//                             <button className='modal-close-button' onClick={handleSetModal}>Volver</button>\n//                         </div>\n//                         <DetailOrden orden={currentItem} setForceRender={setForceRender} handleSetModal={handleSetModal} />\n//                     </div>\n//                 </div>\n//             }\n\n//             <div className='head-table'>\n//                 <div className='row row-line'>\n//                     <h1>Ordenes</h1>\n//                     {props.changeFrame}\n//                 </div>\n//                 <div className='row'>\n//                     <input\n//                         type=\"search\"\n//                         placeholder=\"Buscar...\"\n//                         value={searchTerm}\n//                         className='finder'\n//                         onChange={(e) => setSearchTerm(e.target.value)}\n//                     />\n//                     <button className='head-button' onClick={() => setModal(true)}>Crear</button>\n//                 </div>\n//             </div>\n//             <table className=\"cliente-table\">\n//                 <thead>\n//                     <tr>\n//                         <th>\n//                             <button className={filterColumn && filterColumn.toString() === 'vehiculo,patente' ? 'selected' : ''} onClick={() => handleColumnButtonClick([\"vehiculo\", \"patente\"])}>\n//                                 Vehiculo\n//                             </button>\n//                         </th>\n//                         <th>\n//                             <button className={filterColumn && filterColumn.toString() === 'cliente,nombre' ? 'selected' : ''} onClick={() => handleColumnButtonClick([\"cliente\", \"nombre\"])}>\n//                                 Nombre cliente\n//                             </button>\n//                         </th>\n//                         <th>\n//                             <button className={filterColumn && filterColumn.toString() === 'cliente,apellido' ? 'selected' : ''} onClick={() => handleColumnButtonClick([\"cliente\", \"apellido\"])}>\n//                                 Apellido cliente\n//                             </button>\n//                         </th>\n//                         <th>\n//                             <p>Servicios</p>\n//                         </th>\n//                         <th>\n//                             Acciones\n//                         </th>\n//                     </tr>\n//                 </thead>\n//                 <tbody>\n//                     {filteredData.map((item, index) => (\n//                         <tr key={index}>\n//                             <td>{item.vehiculo.patente}</td>\n//                             <td>{item.cliente.nombre}</td>\n//                             <td>{item.cliente.apellido}</td>\n//                             <td>\n//                                 <select className='cliente-table-select'>\n//                                     {item.servicios.map(servicio => (\n//                                         <option value={servicio.nombre}>{servicio.nombre}</option>\n//                                     ))}\n//                                 </select>\n//                             </td>\n//                             <td className='action-box'>\n//                                 <button className='action-button red' onClick={() => handleDeleteItem(item)}>-</button>\n//                                 <button className='action-button green' onClick={() => handleSetModal(item)}>+</button>\n//                             </td>\n//                         </tr>\n//                     ))}\n//                 </tbody>\n//             </table>\n//         </div >\n//     );\n\n// };\n"],"mappings":";AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}