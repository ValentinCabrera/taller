{"ast":null,"code":"var _jsxFileName = \"/Users/valentincabrera/Library/Mobile Documents/com~apple~CloudDocs/General/UTN/4to/ProgramacionAvanzada/taller/front/src/Components/Partials/RecoverTable.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport backIcon from '../../Static/back.png';\nimport Table from './Table';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function RecoverTable(props) {\n  _s();\n  const {\n    recoverFetch,\n    table,\n    changeFrame,\n    vocabulary,\n    id,\n    fetchGet\n  } = props;\n  const [forceRender, setForceRender] = useState({});\n  const [items, setItems] = useState();\n  useEffect(() => {\n    fetchGet().then(response => setItems(response));\n  }, [forceRender]);\n  return /*#__PURE__*/_jsxDEV(Table, {\n    items: items,\n    title: \"Eliminados\",\n    changeFrame: props.changeFrame,\n    acciones: [{\n      component: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"action-button back-button\",\n        onClick: () => handleRecoverItem(),\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: backIcon,\n          alt: \"Editar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }, this)\n    }],\n    table: table\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 13\n  }, this);\n\n  // const [items, setItems] = useState([]);\n  // const [forceRender, setForceRender] = useState();\n  // const [modal, setModal] = useState();\n  // const [currentItem, setCurrentItem] = useState();\n\n  // useEffect(() => {\n  //     fetchGet().then(response => setItems(response));\n  // }, [forceRender]);\n\n  // const [searchTerm, setSearchTerm] = useState('');\n  // const [filterColumn, setFilterColumn] = useState(null);\n\n  // const handleColumnButtonClick = (columnName) => {\n  //     if (filterColumn) {\n  //         if (columnName.toString() !== filterColumn.toString()) setFilterColumn(columnName);\n  //         else setFilterColumn(null);\n  //     } else setFilterColumn(columnName);\n  // }\n\n  // function handleRecoverItem(item) {\n  //     recoverFetch(item[id])\n  //         .then(response => {\n  //             setForceRender({});\n  //             alert(`Se recupero exitosamente ${vocabulary.pronombre} ${vocabulary.singular} con ${vocabulary.id} ${item[vocabulary.id]}.`)\n  //         })\n  //         .catch(error => console.log(error))\n  // }\n\n  // const filteredData = items.filter((item) => {\n  //     if (filterColumn) {\n  //         let valueToSearch = item;\n\n  //         for (let i of filterColumn) {\n  //             valueToSearch = valueToSearch[i];\n  //         }\n  //         return valueToSearch.toString().toLowerCase().includes(searchTerm.toLowerCase());\n  //     } else {\n  //         return true;\n  //     }\n  // });\n\n  // function getAtributte(item, index) {\n  //     for (let i of index) {\n  //         item = item[i];\n  //     } return item;\n  // }\n\n  // return (\n  //     <div>\n  //         <div className='head-table'>\n  //             <div className='row row-line'>\n  //                 <h1>Eliminados</h1>\n  //                 {changeFrame}\n  //             </div>\n  //             <div className='row'>\n  //                 <input\n  //                     type=\"search\"\n  //                     placeholder=\"Buscar...\"\n  //                     value={searchTerm}\n  //                     className='finder'\n  //                     onChange={(e) => setSearchTerm(e.target.value)}\n  //                 />\n  //                 <button className='head-button' onClick={() => setModal(true)}>Crear</button>\n  //             </div>\n  //         </div>\n  //         <table className=\"cliente-table\">\n  //             <thead>\n  //                 <tr>\n  //                     {table.map(group => (\n  //                         <th>\n  //                             <button className={filterColumn && filterColumn.toString() === group.filter.toString() ? 'selected' : ''} onClick={() => handleColumnButtonClick(group.filter)}>\n  //                                 {group.column}\n  //                             </button>\n  //                         </th>\n  //                     ))}\n  //                     <th>\n  //                         Accion\n  //                     </th>\n  //                 </tr>\n  //             </thead>\n  //             <tbody>\n  //                 {filteredData.map((item, index) => (\n  //                     <tr key={index}>\n  //                         {table.map(group => <td>{getAtributte(item, group.row)}</td>)}\n  //                         <td className='action-box'>\n  //                             <button className='action-button back-button' onClick={() => handleRecoverItem(item)}>\n  //                                 <img src={backIcon} alt=\"Editar\" />\n  //                             </button>\n  //                         </td>\n  //                     </tr>\n  //                 ))}\n  //             </tbody>\n  //         </table>\n  //     </div >\n  // );\n}\n_s(RecoverTable, \"rqB1GrECHw9JdUr4xhLWj9jK3RU=\");\n_c = RecoverTable;\n;\nvar _c;\n$RefreshReg$(_c, \"RecoverTable\");","map":{"version":3,"names":["React","useEffect","useState","backIcon","Table","jsxDEV","_jsxDEV","RecoverTable","props","_s","recoverFetch","table","changeFrame","vocabulary","id","fetchGet","forceRender","setForceRender","items","setItems","then","response","title","acciones","component","className","onClick","handleRecoverItem","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/valentincabrera/Library/Mobile Documents/com~apple~CloudDocs/General/UTN/4to/ProgramacionAvanzada/taller/front/src/Components/Partials/RecoverTable.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport backIcon from '../../Static/back.png';\nimport Table from './Table';\n\nexport default function RecoverTable(props) {\n    const { recoverFetch, table, changeFrame, vocabulary, id, fetchGet } = props;\n\n    const [forceRender, setForceRender] = useState({})\n    const [items, setItems] = useState()\n\n    useEffect(() => {\n        fetchGet().then(response => setItems(response));\n    }, [forceRender])\n\n    return (<Table\n        items={items}\n        title={\"Eliminados\"}\n        changeFrame={props.changeFrame}\n        acciones={[{\n            component:\n                <button className='action-button back-button' onClick={() => handleRecoverItem()}>\n                    <img src={backIcon} alt=\"Editar\" />\n                </button>\n        }\n        ]}\n        table={table}\n\n    />)\n\n    // const [items, setItems] = useState([]);\n    // const [forceRender, setForceRender] = useState();\n    // const [modal, setModal] = useState();\n    // const [currentItem, setCurrentItem] = useState();\n\n    // useEffect(() => {\n    //     fetchGet().then(response => setItems(response));\n    // }, [forceRender]);\n\n    // const [searchTerm, setSearchTerm] = useState('');\n    // const [filterColumn, setFilterColumn] = useState(null);\n\n    // const handleColumnButtonClick = (columnName) => {\n    //     if (filterColumn) {\n    //         if (columnName.toString() !== filterColumn.toString()) setFilterColumn(columnName);\n    //         else setFilterColumn(null);\n    //     } else setFilterColumn(columnName);\n    // }\n\n    // function handleRecoverItem(item) {\n    //     recoverFetch(item[id])\n    //         .then(response => {\n    //             setForceRender({});\n    //             alert(`Se recupero exitosamente ${vocabulary.pronombre} ${vocabulary.singular} con ${vocabulary.id} ${item[vocabulary.id]}.`)\n    //         })\n    //         .catch(error => console.log(error))\n    // }\n\n    // const filteredData = items.filter((item) => {\n    //     if (filterColumn) {\n    //         let valueToSearch = item;\n\n    //         for (let i of filterColumn) {\n    //             valueToSearch = valueToSearch[i];\n    //         }\n    //         return valueToSearch.toString().toLowerCase().includes(searchTerm.toLowerCase());\n    //     } else {\n    //         return true;\n    //     }\n    // });\n\n    // function getAtributte(item, index) {\n    //     for (let i of index) {\n    //         item = item[i];\n    //     } return item;\n    // }\n\n    // return (\n    //     <div>\n    //         <div className='head-table'>\n    //             <div className='row row-line'>\n    //                 <h1>Eliminados</h1>\n    //                 {changeFrame}\n    //             </div>\n    //             <div className='row'>\n    //                 <input\n    //                     type=\"search\"\n    //                     placeholder=\"Buscar...\"\n    //                     value={searchTerm}\n    //                     className='finder'\n    //                     onChange={(e) => setSearchTerm(e.target.value)}\n    //                 />\n    //                 <button className='head-button' onClick={() => setModal(true)}>Crear</button>\n    //             </div>\n    //         </div>\n    //         <table className=\"cliente-table\">\n    //             <thead>\n    //                 <tr>\n    //                     {table.map(group => (\n    //                         <th>\n    //                             <button className={filterColumn && filterColumn.toString() === group.filter.toString() ? 'selected' : ''} onClick={() => handleColumnButtonClick(group.filter)}>\n    //                                 {group.column}\n    //                             </button>\n    //                         </th>\n    //                     ))}\n    //                     <th>\n    //                         Accion\n    //                     </th>\n    //                 </tr>\n    //             </thead>\n    //             <tbody>\n    //                 {filteredData.map((item, index) => (\n    //                     <tr key={index}>\n    //                         {table.map(group => <td>{getAtributte(item, group.row)}</td>)}\n    //                         <td className='action-box'>\n    //                             <button className='action-button back-button' onClick={() => handleRecoverItem(item)}>\n    //                                 <img src={backIcon} alt=\"Editar\" />\n    //                             </button>\n    //                         </td>\n    //                     </tr>\n    //                 ))}\n    //             </tbody>\n    //         </table>\n    //     </div >\n    // );\n};\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,KAAK,MAAM,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5B,eAAe,SAASC,YAAYA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACxC,MAAM;IAAEC,YAAY;IAAEC,KAAK;IAAEC,WAAW;IAAEC,UAAU;IAAEC,EAAE;IAAEC;EAAS,CAAC,GAAGP,KAAK;EAE5E,MAAM,CAACQ,WAAW,EAAEC,cAAc,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC,CAAC;EAClD,MAAM,CAACgB,KAAK,EAAEC,QAAQ,CAAC,GAAGjB,QAAQ,CAAC,CAAC;EAEpCD,SAAS,CAAC,MAAM;IACZc,QAAQ,CAAC,CAAC,CAACK,IAAI,CAACC,QAAQ,IAAIF,QAAQ,CAACE,QAAQ,CAAC,CAAC;EACnD,CAAC,EAAE,CAACL,WAAW,CAAC,CAAC;EAEjB,oBAAQV,OAAA,CAACF,KAAK;IACVc,KAAK,EAAEA,KAAM;IACbI,KAAK,EAAE,YAAa;IACpBV,WAAW,EAAEJ,KAAK,CAACI,WAAY;IAC/BW,QAAQ,EAAE,CAAC;MACPC,SAAS,eACLlB,OAAA;QAAQmB,SAAS,EAAC,2BAA2B;QAACC,OAAO,EAAEA,CAAA,KAAMC,iBAAiB,CAAC,CAAE;QAAAC,QAAA,eAC7EtB,OAAA;UAAKuB,GAAG,EAAE1B,QAAS;UAAC2B,GAAG,EAAC;QAAQ;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/B;IAChB,CAAC,CACC;IACFvB,KAAK,EAAEA;EAAM;IAAAoB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEhB,CAAC;;EAEF;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACJ;AAACzB,EAAA,CAxHuBF,YAAY;AAAA4B,EAAA,GAAZ5B,YAAY;AAwHnC;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}