{"ast":null,"code":"export const host = \"http://localhost:8080/\";\nasync function customFetch(url, requestInit) {\n  try {\n    const response = await fetch(url, requestInit);\n    const responseText = await response.text();\n    try {\n      return JSON.parse(responseText);\n    } catch (error) {\n      console.log(error);\n      return [];\n    }\n    ;\n  } catch (error) {\n    throw new Error(error);\n  }\n  ;\n}\n;\nexport async function getFetch(url, token) {\n  const headers = {\n    'Content-Type': 'application/json'\n  };\n  if (token) headers['Token'] = token;\n  return customFetch(url, {\n    headers: headers\n  });\n}\n;\nexport async function postFetch(url, body, token) {\n  const headers = {\n    'Content-Type': 'application/json'\n  };\n  if (token) headers['Token'] = token;\n  return customFetch(url, {\n    method: 'POST',\n    headers: headers,\n    body: JSON.stringify(body)\n  });\n}\n;","map":{"version":3,"names":["host","customFetch","url","requestInit","response","fetch","responseText","text","JSON","parse","error","console","log","Error","getFetch","token","headers","postFetch","body","method","stringify"],"sources":["C:/Users/Particular/taller/front/src/Utils/Fetchs.js"],"sourcesContent":["export const host = \"http://localhost:8080/\";\r\n\r\nasync function customFetch(url, requestInit) {\r\n    try {\r\n        const response = await fetch(url, requestInit);\r\n        const responseText = await response.text();\r\n\r\n        try {\r\n            return JSON.parse(responseText);\r\n        } catch (error) {\r\n            console.log(error);\r\n            return [];\r\n        };\r\n    } catch (error) { throw new Error(error) };\r\n};\r\n\r\nexport async function getFetch(url, token) {\r\n    const headers = { 'Content-Type': 'application/json' };\r\n    if (token) headers['Token'] = token;\r\n\r\n    return customFetch(url, { headers: headers });\r\n};\r\n\r\nexport async function postFetch(url, body, token) {\r\n    const headers = { 'Content-Type': 'application/json' };\r\n    if (token) headers['Token'] = token;\r\n\r\n    return customFetch(url, { method: 'POST', headers: headers, body: JSON.stringify(body) });\r\n};"],"mappings":"AAAA,OAAO,MAAMA,IAAI,GAAG,wBAAwB;AAE5C,eAAeC,WAAWA,CAACC,GAAG,EAAEC,WAAW,EAAE;EACzC,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAG,EAAEC,WAAW,CAAC;IAC9C,MAAMG,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAE1C,IAAI;MACA,OAAOC,IAAI,CAACC,KAAK,CAACH,YAAY,CAAC;IACnC,CAAC,CAAC,OAAOI,KAAK,EAAE;MACZC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MAClB,OAAO,EAAE;IACb;IAAC;EACL,CAAC,CAAC,OAAOA,KAAK,EAAE;IAAE,MAAM,IAAIG,KAAK,CAACH,KAAK,CAAC;EAAC;EAAC;AAC9C;AAAC;AAED,OAAO,eAAeI,QAAQA,CAACZ,GAAG,EAAEa,KAAK,EAAE;EACvC,MAAMC,OAAO,GAAG;IAAE,cAAc,EAAE;EAAmB,CAAC;EACtD,IAAID,KAAK,EAAEC,OAAO,CAAC,OAAO,CAAC,GAAGD,KAAK;EAEnC,OAAOd,WAAW,CAACC,GAAG,EAAE;IAAEc,OAAO,EAAEA;EAAQ,CAAC,CAAC;AACjD;AAAC;AAED,OAAO,eAAeC,SAASA,CAACf,GAAG,EAAEgB,IAAI,EAAEH,KAAK,EAAE;EAC9C,MAAMC,OAAO,GAAG;IAAE,cAAc,EAAE;EAAmB,CAAC;EACtD,IAAID,KAAK,EAAEC,OAAO,CAAC,OAAO,CAAC,GAAGD,KAAK;EAEnC,OAAOd,WAAW,CAACC,GAAG,EAAE;IAAEiB,MAAM,EAAE,MAAM;IAAEH,OAAO,EAAEA,OAAO;IAAEE,IAAI,EAAEV,IAAI,CAACY,SAAS,CAACF,IAAI;EAAE,CAAC,CAAC;AAC7F;AAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}